Reverse a String:

#include <iostream>
#include <algorithm>
using namespace std;

int main() {
    string str;
    cout << "Enter a string: ";
    cin >> str;

    reverse(str.begin(), str.end());  // STL function to reverse string

    cout << "Reversed String: " << str << endl;
    return 0;
}


PrimeNumber:



#include<iostream>
// #include<cstdio>
using namespace std;

int main(){
    int n;
    int c=0;
    cout<<"Enter the number";
    cin>>n;
    if (n<=1){
        cout<<"Not Prime";
        
    }
    else{
        for(int i=2;i<n;i++){
            if (n%i==0){
                c=c+1;
            };
        }
        if (c==0){
            cout<<"Prime";
            
        }
        else{
            cout<<"Not Prime";
        }
    }
    
}


Simple Calculator ( + , - , * , / ):

#include<iostream>
using namespace std;

int main(){
    double a,b;
    char op;
    
    cout<<"Enter first number:";
    cin>>a;
    
    cout<<"Enter operator ";
    cin>>op;
    
    cout<<"Enter secound number";
    cin>>b;
    
    switch(op){
        case '+':   cout<<"Output"<<a+b;break;
        case '-':   cout<<"Output"<<a-b ;break;
        case '*':   cout<<"Output"<<a*b;break;
    }
}




#include<iostream>
using namespace std;

int main(){
    int arr[10];
    
    for(int i=1;i<=10;i++){
        arr[i]=i;
    }
    
    for (int j=0;j<=9;j++){
        cout<<arr[j];
    }
    
}


#include <iostream>
using namespace std;

int main() {
    int n;
    cout << "Enter number of terms: ";
    cin >> n;

    int a = 0, b = 1;
    cout << a << " " << b << " ";

    for(int i = 3; i <= n; i++) {
        int c = a + b;
        cout << c << " ";
        a = b;
        b = c;
    }

    cout << endl;
    return 0;
}






_-----------------------------------

1
#include<iostream>
using namespace std;

class Student{
    static int count;
    
    public:
    Student(){
        count++;
    }
    
    static int getcount(){
        return count;
    }
};

int Student::count=0;

int main(){
    Student p1,p2,p3; 
    
    cout<<"Total"<<Student::getcount()<<endl;
}
---------------
2

#include<iostream>
using namespace std;

class Person{
    int age;
    public:
    Person(int age){
        this->age=age;
    }
    void display(){
        cout<<"age"<<this->age<<endl;
    }
};

int main(){
    Person p1(25);
    p1.display();
    Person p2(30);
    p2.display();
}


#include<iostream>
using namespace std;

int main(){
     int a=10,b=0;
     try{
         if (b==0)
            throw "division by 0 error\n";
        int result=a/b;
        cout<<result;
     }
     catch(const char* err){
         cout<<"exception caught"<<err<<endl;
     }
}

------------------
#include<iostream>
using namespace std;
class Vechile{
    public:
    void display(){
        cout<<"This is base class";
    }
};

class Car: virtual public Vechile{
    
};
class Truck: virtual public Vechile{
    
};

class PickupTruck:public Car,public Truck{
    
};

int main(){
    PickupTruck pt;
    pt.display();
    
}

-------------------

#include <iostream>
using namespace std;

class Transaction;

class Account {
    double balance;
public:
    Account(double bal) : balance(bal) {}
    friend class Transaction;
    void displayBalance() const {
        cout << "Current Balance : " << balance << endl;
    }
};

class Transaction {
public:
    bool withdraw(Account& acc, double amount) {   // pass by reference
        if (amount <= 0) {
            cout << "Invalid amount" << endl;
            return false;
        }
        if (amount > acc.balance) {
            cout << "Insufficient funds for withdrawal" << endl;
            return false;
        }
        acc.balance -= amount;   // modifies the real account
        cout << "Withdrawal of " << amount << " successful" << endl;
        return true;
    }
};

int main() {
    Account myAccount(500);
    Transaction myTransaction;

    myAccount.displayBalance();          // 500
    myTransaction.withdraw(myAccount,150); // success
    myAccount.displayBalance();          // 350

    return 0;
}
